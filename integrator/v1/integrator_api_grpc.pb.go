// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: integrator/v1/integrator_api.proto

package integrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntegratorService_ProcessPayment_FullMethodName = "/vpns.Client.V1.IntegratorService/ProcessPayment"
	IntegratorService_CheckBan_FullMethodName       = "/vpns.Client.V1.IntegratorService/CheckBan"
)

// IntegratorServiceClient is the client API for IntegratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegratorServiceClient interface {
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	CheckBan(ctx context.Context, in *CheckBanRequest, opts ...grpc.CallOption) (*CheckBanResponse, error)
}

type integratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegratorServiceClient(cc grpc.ClientConnInterface) IntegratorServiceClient {
	return &integratorServiceClient{cc}
}

func (c *integratorServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, IntegratorService_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integratorServiceClient) CheckBan(ctx context.Context, in *CheckBanRequest, opts ...grpc.CallOption) (*CheckBanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckBanResponse)
	err := c.cc.Invoke(ctx, IntegratorService_CheckBan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegratorServiceServer is the server API for IntegratorService service.
// All implementations must embed UnimplementedIntegratorServiceServer
// for forward compatibility.
type IntegratorServiceServer interface {
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	CheckBan(context.Context, *CheckBanRequest) (*CheckBanResponse, error)
	mustEmbedUnimplementedIntegratorServiceServer()
}

// UnimplementedIntegratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntegratorServiceServer struct{}

func (UnimplementedIntegratorServiceServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedIntegratorServiceServer) CheckBan(context.Context, *CheckBanRequest) (*CheckBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBan not implemented")
}
func (UnimplementedIntegratorServiceServer) mustEmbedUnimplementedIntegratorServiceServer() {}
func (UnimplementedIntegratorServiceServer) testEmbeddedByValue()                           {}

// UnsafeIntegratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegratorServiceServer will
// result in compilation errors.
type UnsafeIntegratorServiceServer interface {
	mustEmbedUnimplementedIntegratorServiceServer()
}

func RegisterIntegratorServiceServer(s grpc.ServiceRegistrar, srv IntegratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntegratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntegratorService_ServiceDesc, srv)
}

func _IntegratorService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegratorServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegratorService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegratorServiceServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegratorService_CheckBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegratorServiceServer).CheckBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegratorService_CheckBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegratorServiceServer).CheckBan(ctx, req.(*CheckBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegratorService_ServiceDesc is the grpc.ServiceDesc for IntegratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vpns.Client.V1.IntegratorService",
	HandlerType: (*IntegratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPayment",
			Handler:    _IntegratorService_ProcessPayment_Handler,
		},
		{
			MethodName: "CheckBan",
			Handler:    _IntegratorService_CheckBan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrator/v1/integrator_api.proto",
}
